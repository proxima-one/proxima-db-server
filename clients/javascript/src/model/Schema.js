/**
 * Proxima DB API
 * Documentation for the http/https server for Proxima Database
 *
 * The version of the OpenAPI document: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Schema model module.
 * @module model/Schema
 * @version 1.0.3
 */
class Schema {
    /**
     * Constructs a new <code>Schema</code>.
     * @alias module:model/Schema
     * @param schema {String} 
     */
    constructor(schema) { 
        
        Schema.initialize(this, schema);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, schema) { 
        obj['schema'] = schema;
    }

    /**
     * Constructs a <code>Schema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Schema} obj Optional instance to populate.
     * @return {module:model/Schema} The populated <code>Schema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Schema();

            if (data.hasOwnProperty('schema')) {
                obj['schema'] = ApiClient.convertToType(data['schema'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], Object);
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], [Object]);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [Object]);
            }
        }
        return obj;
    }


}

/**
 * @member {String} schema
 */
Schema.prototype['schema'] = undefined;

/**
 * @member {String} title
 */
Schema.prototype['title'] = undefined;

/**
 * @member {String} description
 */
Schema.prototype['description'] = undefined;

/**
 * @member {String} type
 */
Schema.prototype['type'] = undefined;

/**
 * @member {Object} properties
 */
Schema.prototype['properties'] = undefined;

/**
 * @member {Array.<Object>} required
 */
Schema.prototype['required'] = undefined;

/**
 * @member {Array.<Object>} tags
 */
Schema.prototype['tags'] = undefined;






export default Schema;

