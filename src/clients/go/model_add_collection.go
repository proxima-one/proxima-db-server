/*
Proxima DB API

Documentation for the http/https server for Proxima Database

API version: 1.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AddCollection struct for AddCollection
type AddCollection struct {
	Id *string `json:"id,omitempty"`
	Meta *AddCollectionMeta `json:"meta,omitempty"`
}

// NewAddCollection instantiates a new AddCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddCollection() *AddCollection {
	this := AddCollection{}
	return &this
}

// NewAddCollectionWithDefaults instantiates a new AddCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddCollectionWithDefaults() *AddCollection {
	this := AddCollection{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AddCollection) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCollection) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AddCollection) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AddCollection) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *AddCollection) GetMeta() AddCollectionMeta {
	if o == nil || o.Meta == nil {
		var ret AddCollectionMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCollection) GetMetaOk() (*AddCollectionMeta, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *AddCollection) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given AddCollectionMeta and assigns it to the Meta field.
func (o *AddCollection) SetMeta(v AddCollectionMeta) {
	o.Meta = &v
}

func (o AddCollection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	return json.Marshal(toSerialize)
}

type NullableAddCollection struct {
	value *AddCollection
	isSet bool
}

func (v NullableAddCollection) Get() *AddCollection {
	return v.value
}

func (v *NullableAddCollection) Set(val *AddCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableAddCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableAddCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddCollection(val *AddCollection) *NullableAddCollection {
	return &NullableAddCollection{value: val, isSet: true}
}

func (v NullableAddCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


