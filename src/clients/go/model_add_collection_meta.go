/*
Proxima DB API

Documentation for the http/https server for Proxima Database

API version: 1.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AddCollectionMeta struct for AddCollectionMeta
type AddCollectionMeta struct {
	Schema *string `json:"schema,omitempty"`
	Controllers *[]string `json:"controllers,omitempty"`
	Version *string `json:"version,omitempty"`
}

// NewAddCollectionMeta instantiates a new AddCollectionMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddCollectionMeta() *AddCollectionMeta {
	this := AddCollectionMeta{}
	return &this
}

// NewAddCollectionMetaWithDefaults instantiates a new AddCollectionMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddCollectionMetaWithDefaults() *AddCollectionMeta {
	this := AddCollectionMeta{}
	return &this
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *AddCollectionMeta) GetSchema() string {
	if o == nil || o.Schema == nil {
		var ret string
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCollectionMeta) GetSchemaOk() (*string, bool) {
	if o == nil || o.Schema == nil {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *AddCollectionMeta) HasSchema() bool {
	if o != nil && o.Schema != nil {
		return true
	}

	return false
}

// SetSchema gets a reference to the given string and assigns it to the Schema field.
func (o *AddCollectionMeta) SetSchema(v string) {
	o.Schema = &v
}

// GetControllers returns the Controllers field value if set, zero value otherwise.
func (o *AddCollectionMeta) GetControllers() []string {
	if o == nil || o.Controllers == nil {
		var ret []string
		return ret
	}
	return *o.Controllers
}

// GetControllersOk returns a tuple with the Controllers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCollectionMeta) GetControllersOk() (*[]string, bool) {
	if o == nil || o.Controllers == nil {
		return nil, false
	}
	return o.Controllers, true
}

// HasControllers returns a boolean if a field has been set.
func (o *AddCollectionMeta) HasControllers() bool {
	if o != nil && o.Controllers != nil {
		return true
	}

	return false
}

// SetControllers gets a reference to the given []string and assigns it to the Controllers field.
func (o *AddCollectionMeta) SetControllers(v []string) {
	o.Controllers = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *AddCollectionMeta) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCollectionMeta) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *AddCollectionMeta) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *AddCollectionMeta) SetVersion(v string) {
	o.Version = &v
}

func (o AddCollectionMeta) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Schema != nil {
		toSerialize["schema"] = o.Schema
	}
	if o.Controllers != nil {
		toSerialize["controllers"] = o.Controllers
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableAddCollectionMeta struct {
	value *AddCollectionMeta
	isSet bool
}

func (v NullableAddCollectionMeta) Get() *AddCollectionMeta {
	return v.value
}

func (v *NullableAddCollectionMeta) Set(val *AddCollectionMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableAddCollectionMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableAddCollectionMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddCollectionMeta(val *AddCollectionMeta) *NullableAddCollectionMeta {
	return &NullableAddCollectionMeta{value: val, isSet: true}
}

func (v NullableAddCollectionMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddCollectionMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


