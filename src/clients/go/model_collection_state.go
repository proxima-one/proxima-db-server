/*
Proxima DB API

Documentation for the http/https server for Proxima Database

API version: 1.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CollectionState struct for CollectionState
type CollectionState struct {
	Version *string `json:"version,omitempty"`
	Name *string `json:"name,omitempty"`
	Controllers *[]string `json:"controllers,omitempty"`
	LatestCommit *string `json:"latest_commit,omitempty"`
	Schema *[]map[string]interface{} `json:"schema,omitempty"`
	Offset *float32 `json:"offset,omitempty"`
}

// NewCollectionState instantiates a new CollectionState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCollectionState() *CollectionState {
	this := CollectionState{}
	return &this
}

// NewCollectionStateWithDefaults instantiates a new CollectionState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCollectionStateWithDefaults() *CollectionState {
	this := CollectionState{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *CollectionState) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionState) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *CollectionState) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *CollectionState) SetVersion(v string) {
	o.Version = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CollectionState) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionState) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CollectionState) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CollectionState) SetName(v string) {
	o.Name = &v
}

// GetControllers returns the Controllers field value if set, zero value otherwise.
func (o *CollectionState) GetControllers() []string {
	if o == nil || o.Controllers == nil {
		var ret []string
		return ret
	}
	return *o.Controllers
}

// GetControllersOk returns a tuple with the Controllers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionState) GetControllersOk() (*[]string, bool) {
	if o == nil || o.Controllers == nil {
		return nil, false
	}
	return o.Controllers, true
}

// HasControllers returns a boolean if a field has been set.
func (o *CollectionState) HasControllers() bool {
	if o != nil && o.Controllers != nil {
		return true
	}

	return false
}

// SetControllers gets a reference to the given []string and assigns it to the Controllers field.
func (o *CollectionState) SetControllers(v []string) {
	o.Controllers = &v
}

// GetLatestCommit returns the LatestCommit field value if set, zero value otherwise.
func (o *CollectionState) GetLatestCommit() string {
	if o == nil || o.LatestCommit == nil {
		var ret string
		return ret
	}
	return *o.LatestCommit
}

// GetLatestCommitOk returns a tuple with the LatestCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionState) GetLatestCommitOk() (*string, bool) {
	if o == nil || o.LatestCommit == nil {
		return nil, false
	}
	return o.LatestCommit, true
}

// HasLatestCommit returns a boolean if a field has been set.
func (o *CollectionState) HasLatestCommit() bool {
	if o != nil && o.LatestCommit != nil {
		return true
	}

	return false
}

// SetLatestCommit gets a reference to the given string and assigns it to the LatestCommit field.
func (o *CollectionState) SetLatestCommit(v string) {
	o.LatestCommit = &v
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *CollectionState) GetSchema() []map[string]interface{} {
	if o == nil || o.Schema == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionState) GetSchemaOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Schema == nil {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *CollectionState) HasSchema() bool {
	if o != nil && o.Schema != nil {
		return true
	}

	return false
}

// SetSchema gets a reference to the given []map[string]interface{} and assigns it to the Schema field.
func (o *CollectionState) SetSchema(v []map[string]interface{}) {
	o.Schema = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *CollectionState) GetOffset() float32 {
	if o == nil || o.Offset == nil {
		var ret float32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionState) GetOffsetOk() (*float32, bool) {
	if o == nil || o.Offset == nil {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *CollectionState) HasOffset() bool {
	if o != nil && o.Offset != nil {
		return true
	}

	return false
}

// SetOffset gets a reference to the given float32 and assigns it to the Offset field.
func (o *CollectionState) SetOffset(v float32) {
	o.Offset = &v
}

func (o CollectionState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Controllers != nil {
		toSerialize["controllers"] = o.Controllers
	}
	if o.LatestCommit != nil {
		toSerialize["latest_commit"] = o.LatestCommit
	}
	if o.Schema != nil {
		toSerialize["schema"] = o.Schema
	}
	if o.Offset != nil {
		toSerialize["offset"] = o.Offset
	}
	return json.Marshal(toSerialize)
}

type NullableCollectionState struct {
	value *CollectionState
	isSet bool
}

func (v NullableCollectionState) Get() *CollectionState {
	return v.value
}

func (v *NullableCollectionState) Set(val *CollectionState) {
	v.value = val
	v.isSet = true
}

func (v NullableCollectionState) IsSet() bool {
	return v.isSet
}

func (v *NullableCollectionState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCollectionState(val *CollectionState) *NullableCollectionState {
	return &NullableCollectionState{value: val, isSet: true}
}

func (v NullableCollectionState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCollectionState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


