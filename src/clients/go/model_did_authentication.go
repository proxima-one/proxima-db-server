/*
Proxima DB API

Documentation for the http/https server for Proxima Database

API version: 1.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DIDAuthentication struct for DIDAuthentication
type DIDAuthentication struct {
	Id *string `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	Controller *string `json:"controller,omitempty"`
	PublicKeyMultibase *string `json:"publicKeyMultibase,omitempty"`
}

// NewDIDAuthentication instantiates a new DIDAuthentication object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDIDAuthentication() *DIDAuthentication {
	this := DIDAuthentication{}
	return &this
}

// NewDIDAuthenticationWithDefaults instantiates a new DIDAuthentication object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDIDAuthenticationWithDefaults() *DIDAuthentication {
	this := DIDAuthentication{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DIDAuthentication) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DIDAuthentication) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DIDAuthentication) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DIDAuthentication) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DIDAuthentication) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DIDAuthentication) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DIDAuthentication) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DIDAuthentication) SetType(v string) {
	o.Type = &v
}

// GetController returns the Controller field value if set, zero value otherwise.
func (o *DIDAuthentication) GetController() string {
	if o == nil || o.Controller == nil {
		var ret string
		return ret
	}
	return *o.Controller
}

// GetControllerOk returns a tuple with the Controller field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DIDAuthentication) GetControllerOk() (*string, bool) {
	if o == nil || o.Controller == nil {
		return nil, false
	}
	return o.Controller, true
}

// HasController returns a boolean if a field has been set.
func (o *DIDAuthentication) HasController() bool {
	if o != nil && o.Controller != nil {
		return true
	}

	return false
}

// SetController gets a reference to the given string and assigns it to the Controller field.
func (o *DIDAuthentication) SetController(v string) {
	o.Controller = &v
}

// GetPublicKeyMultibase returns the PublicKeyMultibase field value if set, zero value otherwise.
func (o *DIDAuthentication) GetPublicKeyMultibase() string {
	if o == nil || o.PublicKeyMultibase == nil {
		var ret string
		return ret
	}
	return *o.PublicKeyMultibase
}

// GetPublicKeyMultibaseOk returns a tuple with the PublicKeyMultibase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DIDAuthentication) GetPublicKeyMultibaseOk() (*string, bool) {
	if o == nil || o.PublicKeyMultibase == nil {
		return nil, false
	}
	return o.PublicKeyMultibase, true
}

// HasPublicKeyMultibase returns a boolean if a field has been set.
func (o *DIDAuthentication) HasPublicKeyMultibase() bool {
	if o != nil && o.PublicKeyMultibase != nil {
		return true
	}

	return false
}

// SetPublicKeyMultibase gets a reference to the given string and assigns it to the PublicKeyMultibase field.
func (o *DIDAuthentication) SetPublicKeyMultibase(v string) {
	o.PublicKeyMultibase = &v
}

func (o DIDAuthentication) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Controller != nil {
		toSerialize["controller"] = o.Controller
	}
	if o.PublicKeyMultibase != nil {
		toSerialize["publicKeyMultibase"] = o.PublicKeyMultibase
	}
	return json.Marshal(toSerialize)
}

type NullableDIDAuthentication struct {
	value *DIDAuthentication
	isSet bool
}

func (v NullableDIDAuthentication) Get() *DIDAuthentication {
	return v.value
}

func (v *NullableDIDAuthentication) Set(val *DIDAuthentication) {
	v.value = val
	v.isSet = true
}

func (v NullableDIDAuthentication) IsSet() bool {
	return v.isSet
}

func (v *NullableDIDAuthentication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDIDAuthentication(val *DIDAuthentication) *NullableDIDAuthentication {
	return &NullableDIDAuthentication{value: val, isSet: true}
}

func (v NullableDIDAuthentication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDIDAuthentication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


