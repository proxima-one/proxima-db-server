/*
Proxima DB API

Documentation for the http/https server for Proxima Database

API version: 1.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Commit struct for Commit
type Commit struct {
	Id *string `json:"id,omitempty"`
	State *CommitState `json:"state,omitempty"`
}

// NewCommit instantiates a new Commit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommit() *Commit {
	this := Commit{}
	return &this
}

// NewCommitWithDefaults instantiates a new Commit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitWithDefaults() *Commit {
	this := Commit{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Commit) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commit) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Commit) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Commit) SetId(v string) {
	o.Id = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Commit) GetState() CommitState {
	if o == nil || o.State == nil {
		var ret CommitState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commit) GetStateOk() (*CommitState, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Commit) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given CommitState and assigns it to the State field.
func (o *Commit) SetState(v CommitState) {
	o.State = &v
}

func (o Commit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	return json.Marshal(toSerialize)
}

type NullableCommit struct {
	value *Commit
	isSet bool
}

func (v NullableCommit) Get() *Commit {
	return v.value
}

func (v *NullableCommit) Set(val *Commit) {
	v.value = val
	v.isSet = true
}

func (v NullableCommit) IsSet() bool {
	return v.isSet
}

func (v *NullableCommit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommit(val *Commit) *NullableCommit {
	return &NullableCommit{value: val, isSet: true}
}

func (v NullableCommit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


