/*
Proxima DB API

Documentation for the http/https server for Proxima Database

API version: 1.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CommitState struct for CommitState
type CommitState struct {
	Type *string `json:"type,omitempty"`
	Version *string `json:"version,omitempty"`
	StreamId *string `json:"stream_id,omitempty"`
	CommitLink *[]map[string]interface{} `json:"commit_link,omitempty"`
	Data *[]map[string]interface{} `json:"data,omitempty"`
	CommitPrev *[]map[string]interface{} `json:"commit_prev,omitempty"`
	Signature *map[string]interface{} `json:"signature,omitempty"`
}

// NewCommitState instantiates a new CommitState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommitState() *CommitState {
	this := CommitState{}
	return &this
}

// NewCommitStateWithDefaults instantiates a new CommitState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitStateWithDefaults() *CommitState {
	this := CommitState{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CommitState) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitState) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CommitState) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CommitState) SetType(v string) {
	o.Type = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *CommitState) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitState) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *CommitState) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *CommitState) SetVersion(v string) {
	o.Version = &v
}

// GetStreamId returns the StreamId field value if set, zero value otherwise.
func (o *CommitState) GetStreamId() string {
	if o == nil || o.StreamId == nil {
		var ret string
		return ret
	}
	return *o.StreamId
}

// GetStreamIdOk returns a tuple with the StreamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitState) GetStreamIdOk() (*string, bool) {
	if o == nil || o.StreamId == nil {
		return nil, false
	}
	return o.StreamId, true
}

// HasStreamId returns a boolean if a field has been set.
func (o *CommitState) HasStreamId() bool {
	if o != nil && o.StreamId != nil {
		return true
	}

	return false
}

// SetStreamId gets a reference to the given string and assigns it to the StreamId field.
func (o *CommitState) SetStreamId(v string) {
	o.StreamId = &v
}

// GetCommitLink returns the CommitLink field value if set, zero value otherwise.
func (o *CommitState) GetCommitLink() []map[string]interface{} {
	if o == nil || o.CommitLink == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.CommitLink
}

// GetCommitLinkOk returns a tuple with the CommitLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitState) GetCommitLinkOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.CommitLink == nil {
		return nil, false
	}
	return o.CommitLink, true
}

// HasCommitLink returns a boolean if a field has been set.
func (o *CommitState) HasCommitLink() bool {
	if o != nil && o.CommitLink != nil {
		return true
	}

	return false
}

// SetCommitLink gets a reference to the given []map[string]interface{} and assigns it to the CommitLink field.
func (o *CommitState) SetCommitLink(v []map[string]interface{}) {
	o.CommitLink = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *CommitState) GetData() []map[string]interface{} {
	if o == nil || o.Data == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitState) GetDataOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *CommitState) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []map[string]interface{} and assigns it to the Data field.
func (o *CommitState) SetData(v []map[string]interface{}) {
	o.Data = &v
}

// GetCommitPrev returns the CommitPrev field value if set, zero value otherwise.
func (o *CommitState) GetCommitPrev() []map[string]interface{} {
	if o == nil || o.CommitPrev == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.CommitPrev
}

// GetCommitPrevOk returns a tuple with the CommitPrev field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitState) GetCommitPrevOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.CommitPrev == nil {
		return nil, false
	}
	return o.CommitPrev, true
}

// HasCommitPrev returns a boolean if a field has been set.
func (o *CommitState) HasCommitPrev() bool {
	if o != nil && o.CommitPrev != nil {
		return true
	}

	return false
}

// SetCommitPrev gets a reference to the given []map[string]interface{} and assigns it to the CommitPrev field.
func (o *CommitState) SetCommitPrev(v []map[string]interface{}) {
	o.CommitPrev = &v
}

// GetSignature returns the Signature field value if set, zero value otherwise.
func (o *CommitState) GetSignature() map[string]interface{} {
	if o == nil || o.Signature == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitState) GetSignatureOk() (*map[string]interface{}, bool) {
	if o == nil || o.Signature == nil {
		return nil, false
	}
	return o.Signature, true
}

// HasSignature returns a boolean if a field has been set.
func (o *CommitState) HasSignature() bool {
	if o != nil && o.Signature != nil {
		return true
	}

	return false
}

// SetSignature gets a reference to the given map[string]interface{} and assigns it to the Signature field.
func (o *CommitState) SetSignature(v map[string]interface{}) {
	o.Signature = &v
}

func (o CommitState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.StreamId != nil {
		toSerialize["stream_id"] = o.StreamId
	}
	if o.CommitLink != nil {
		toSerialize["commit_link"] = o.CommitLink
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.CommitPrev != nil {
		toSerialize["commit_prev"] = o.CommitPrev
	}
	if o.Signature != nil {
		toSerialize["signature"] = o.Signature
	}
	return json.Marshal(toSerialize)
}

type NullableCommitState struct {
	value *CommitState
	isSet bool
}

func (v NullableCommitState) Get() *CommitState {
	return v.value
}

func (v *NullableCommitState) Set(val *CommitState) {
	v.value = val
	v.isSet = true
}

func (v NullableCommitState) IsSet() bool {
	return v.isSet
}

func (v *NullableCommitState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommitState(val *CommitState) *NullableCommitState {
	return &NullableCommitState{value: val, isSet: true}
}

func (v NullableCommitState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommitState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


