/*
Proxima DB API

Documentation for the http/https server for Proxima Database

API version: 1.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DID struct for DID
type DID struct {
	Id *string `json:"id,omitempty"`
	Authentication *[]DIDAuthentication `json:"authentication,omitempty"`
}

// NewDID instantiates a new DID object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDID() *DID {
	this := DID{}
	return &this
}

// NewDIDWithDefaults instantiates a new DID object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDIDWithDefaults() *DID {
	this := DID{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DID) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DID) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DID) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DID) SetId(v string) {
	o.Id = &v
}

// GetAuthentication returns the Authentication field value if set, zero value otherwise.
func (o *DID) GetAuthentication() []DIDAuthentication {
	if o == nil || o.Authentication == nil {
		var ret []DIDAuthentication
		return ret
	}
	return *o.Authentication
}

// GetAuthenticationOk returns a tuple with the Authentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DID) GetAuthenticationOk() (*[]DIDAuthentication, bool) {
	if o == nil || o.Authentication == nil {
		return nil, false
	}
	return o.Authentication, true
}

// HasAuthentication returns a boolean if a field has been set.
func (o *DID) HasAuthentication() bool {
	if o != nil && o.Authentication != nil {
		return true
	}

	return false
}

// SetAuthentication gets a reference to the given []DIDAuthentication and assigns it to the Authentication field.
func (o *DID) SetAuthentication(v []DIDAuthentication) {
	o.Authentication = &v
}

func (o DID) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Authentication != nil {
		toSerialize["authentication"] = o.Authentication
	}
	return json.Marshal(toSerialize)
}

type NullableDID struct {
	value *DID
	isSet bool
}

func (v NullableDID) Get() *DID {
	return v.value
}

func (v *NullableDID) Set(val *DID) {
	v.value = val
	v.isSet = true
}

func (v NullableDID) IsSet() bool {
	return v.isSet
}

func (v *NullableDID) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDID(val *DID) *NullableDID {
	return &NullableDID{value: val, isSet: true}
}

func (v NullableDID) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDID) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


