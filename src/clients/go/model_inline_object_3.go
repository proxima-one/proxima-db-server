/*
Proxima DB API

Documentation for the http/https server for Proxima Database

API version: 1.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineObject3 struct for InlineObject3
type InlineObject3 struct {
	Key *map[string]interface{} `json:"key,omitempty"`
	Value *map[string]interface{} `json:"value,omitempty"`
	Prove *map[string]interface{} `json:"prove,omitempty"`
}

// NewInlineObject3 instantiates a new InlineObject3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject3() *InlineObject3 {
	this := InlineObject3{}
	return &this
}

// NewInlineObject3WithDefaults instantiates a new InlineObject3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject3WithDefaults() *InlineObject3 {
	this := InlineObject3{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *InlineObject3) GetKey() map[string]interface{} {
	if o == nil || o.Key == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject3) GetKeyOk() (*map[string]interface{}, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *InlineObject3) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given map[string]interface{} and assigns it to the Key field.
func (o *InlineObject3) SetKey(v map[string]interface{}) {
	o.Key = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *InlineObject3) GetValue() map[string]interface{} {
	if o == nil || o.Value == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject3) GetValueOk() (*map[string]interface{}, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *InlineObject3) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *InlineObject3) SetValue(v map[string]interface{}) {
	o.Value = &v
}

// GetProve returns the Prove field value if set, zero value otherwise.
func (o *InlineObject3) GetProve() map[string]interface{} {
	if o == nil || o.Prove == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Prove
}

// GetProveOk returns a tuple with the Prove field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject3) GetProveOk() (*map[string]interface{}, bool) {
	if o == nil || o.Prove == nil {
		return nil, false
	}
	return o.Prove, true
}

// HasProve returns a boolean if a field has been set.
func (o *InlineObject3) HasProve() bool {
	if o != nil && o.Prove != nil {
		return true
	}

	return false
}

// SetProve gets a reference to the given map[string]interface{} and assigns it to the Prove field.
func (o *InlineObject3) SetProve(v map[string]interface{}) {
	o.Prove = &v
}

func (o InlineObject3) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.Prove != nil {
		toSerialize["prove"] = o.Prove
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject3 struct {
	value *InlineObject3
	isSet bool
}

func (v NullableInlineObject3) Get() *InlineObject3 {
	return v.value
}

func (v *NullableInlineObject3) Set(val *InlineObject3) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject3) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject3(val *InlineObject3) *NullableInlineObject3 {
	return &NullableInlineObject3{value: val, isSet: true}
}

func (v NullableInlineObject3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


